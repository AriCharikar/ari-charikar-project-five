{"version":3,"sources":["firebase.js","Header.js","NoteInput.js","Notes.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","NoteInput","state","title","note","createNote","bind","e","key","this","setState","target","value","alert","database","ref","push","htmlFor","type","id","name","onChange","inputHandle","onClick","Component","Notes","fullNote","child","remove","props","notes","map","removeNote","App","dbRef","on","snapshot","noteValue","val","filter","changeDetection","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87ed5ad2.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAK7l0n66SVUNjMh_3JLKWSei44-isww28\",\n  authDomain: \"ari-charikar-project-five.firebaseapp.com\",\n  databaseURL: \"https://ari-charikar-project-five.firebaseio.com\",\n  projectId: \"ari-charikar-project-five\",\n  storageBucket: \"ari-charikar-project-five.appspot.com\",\n  messagingSenderId: \"543660333991\",\n  appId: \"1:543660333991:web:9fd3d6315042f86254f482\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n\n//Important firebase key","import React from 'react';\nimport './style.css';\n\nconst Header = () => (\n    <header className = \"header\">\n        <h1 className=\"textHeader\">Note taking application</h1>\n    </header>\n)\n//Header of the page, contains title\n    \n\nexport default Header;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './style.css';\n\n//Imported necessary modules and refactored into a class component\n\nexport class NoteInput extends Component {\n\n    //Setting the state of the NoteInput (default title and note so that the default is an empty string)\n    constructor() {\n        super();\n        this.state = {\n            title: '',\n            note: '',\n        }\n    \n    //This will be undefined when the function is called, therefore I use bind on (this).\n\n        this.createNote = this.createNote.bind(this);\n    }\n\n    //This handles input and changes the state of the input field in real time, allowing the user to type in words.\n\n    inputHandle(e, key) {\n        this.setState({\n            [key]: e.target.value\n        })\n    }\n\n    //Checks to see if this.state.title is an empty string, if it is, the user is alerted. If it isn't, the data (title and note) are both pushed to the database\n\n    createNote() {\n        if (this.state.title === '' && this.state.note === '') {\n            alert(`Aren't you missing something?`);\n        } else {\n            firebase.database().ref('notes').push({\n                title: this.state.title,\n                note: this.state.note\n            })\n        }\n    }\n\n    //Using jsx to create two forms, one input and one textarea to allow user experience aka note taking, as well as one button for the user to submit their note.\n\n    render() {\n        return (\n            <section className=\"formSection\">\n                <h2>Build the wall as you submit your notes!</h2>\n                <div className=\"formOne\">\n                    <label htmlFor=\"formTitle\">Title</label>\n                    <input type=\"text\" id=\"formTitle\" name=\"formTitle\" value={ this.state.title } onChange={(e) => this.inputHandle(e, 'title') }/>\n{/* Because the input and textarea both have a value of an empty string (because of the value property) the onChange property which uses an arrow function and points to inputHandle which allows the user input to be saved in state. Also the button has an onClick to ensure that the createNote function has run. */}\n                </div>\n                <div className=\"formTwo\">\n                    <label htmlFor=\"formText\">Note</label>\n                    <textarea name=\"formText\" id=\"formText\" value={ this.state.note } onChange={(e) => this.inputHandle(e, 'note') }></textarea>\n\n                </div>\n                <button onClick={ this.createNote }>Create note</button>\n            </section>\n        )\n    }\n}\n\nexport default NoteInput;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport './style.css';\n\nexport class Notes extends Component {\n\n    removeNote(fullNote) {\n        firebase.database().ref('notes').child(fullNote).remove();\n    }\n//Removes both the title and the content\n\n    render() {\n        return (\n            <section className=\"notesSection\">\n                <h6>Create a note and build the wall! Click the x on the top right of the title of your note to delete.</h6>\n                <div className=\"notes\">\n                    { this.props.notes.map(note => (\n                        <div className=\"note\" key={ note.fullNote }>\n                            <div className=\"noteTitle\">\n                            <div className=\"removeNote\" onClick={() => this.removeNote(note.fullNote)}>x</div>\n                                <h3>{ note.title }</h3>\n        {/* JSX that creates a note with a title section and a note section, and puts the contents of that note as the results from the input taken from the user.  */}\n                            </div>\n                            <div className=\"noteText\">\n                                <p>{ note.note }</p>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Notes;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Header from './Header';\nimport NoteInput from './NoteInput';\nimport Notes from './Notes';\nimport './style.css';\n\n//Importing all relevant Components to the main App.js file\n\n//App is refactored from a function into a class\n\nclass App extends Component {\n\n  //Using the constructor in order to initialize it's state in the App class, we then assign notes an empty array and assigning state to notes.\n  constructor() {\n    super();\n    \n    this.state = {\n      notes: []\n  //empty array which represents the initial state of notes.\n    }\n  }\n\n  changeDetection() {\n    this.dbRef.ref('notes').on('child_added', snapshot => {\n\n  //every time a child is added, the note is pushed and so a new note is added.\n      let noteValue = {\n        fullNote: snapshot.key,\n        title: snapshot.val().title,\n        note: snapshot.val().note\n      }\n\n      let notes = this.state.notes;\n      notes.push(noteValue);\n\n      this.setState({\n        notes: notes\n      });\n\n    });\n  // Detect when a note is removed and record new state.\n    this.dbRef.ref('notes').on('child_removed', snapshot => {\n\n      let notes = this.state.notes;\n      notes = notes.filter(note => note.fullNote !== snapshot.key);\n\n      this.setState({\n        notes: notes\n      });\n\n    });\n  }\n\n\n  //We must load data from firebase, we instantiate the network request here to load the data from firebase, and also we call this.changeDetection()\n  componentDidMount() {\n    this.dbRef = firebase.database();\n\n    this.changeDetection();\n  }\n\n  //Look for changes in the firebase database\n\n  \n\n  //Using JSX to print my components to the page\n  \n  render() {\n\n    return (\n      <div className=\"app\">\n        <Header />\n        <main>\n          <NoteInput />\n          <Notes notes={ this.state.notes }/>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}